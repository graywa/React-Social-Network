{"version":3,"sources":["components/Chat/ChatPage.module.css","components/Chat/ChatPage.tsx"],"names":["module","exports","Chat","React","memo","dispatch","useDispatch","status","useSelector","state","chat","useEffect","getMessages","stopGetMessages","className","styles","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","onScroll","e","element","currentTarget","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","ownUserId","authUser","userId","console","log","message_owner","to","message__ava","src","photo","alt","message__content","message__user","userName","setMessage","form","form__text","value","onChange","form__button","disabled","onClick","sendMessage","ChatPage"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,SAAW,2BAA2B,QAAU,0BAA0B,cAAgB,gCAAgC,iBAAmB,mCAAmC,aAAe,+BAA+B,cAAgB,gCAAgC,WAAa,6BAA6B,aAAe,iC,sHCmBjXC,EAAiBC,IAAMC,MAAK,WAChC,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,qBAAU,WAER,OADAN,EAASO,eACF,WACLP,EAASQ,kBAEV,IAGD,sBAAKC,UAAWC,IAAOL,KAAvB,UACc,UAAXH,GAAsB,iEACvB,cAACS,EAAD,IACA,cAACC,EAAD,UAKAD,EAAqB,WACzB,IAAME,EAAWV,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKQ,YAC3DC,EAAoBC,iBAAuB,MAFlB,EAGSC,oBAAS,GAHlB,mBAGxBC,EAHwB,KAGVC,EAHU,KAK/BZ,qBAAU,WAAO,IAAD,EACVW,IACF,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cACvD,CAACR,IAYJ,OACE,sBAAKJ,UAAWC,IAAOG,SAAUS,SAXb,SAACC,GACrB,IAAMC,EAAUD,EAAEE,cAEhBD,EAAQE,aAAeF,EAAQG,UAAY,KAC3CH,EAAQI,aAERV,GAAgB,GACXA,GAAgB,IAIvB,UAEGL,EAASgB,KAAI,SAACC,EAAGC,GAAJ,OACZ,cAACC,EAAD,CAASC,QAASH,GAAQA,EAAEI,OAE9B,qBAAKC,IAAKrB,QAKVkB,EAAiDlC,IAAMC,MAAK,YAAkB,IAAfkC,EAAc,EAAdA,QAE7DG,EAAYjC,aAAY,SAACC,GAAD,OAAyBA,EAAMiC,SAASC,UAKpE,OAHFC,QAAQC,IAAIJ,GAIR,sBAAK3B,UAAW2B,IAAcH,EAAQK,OAAS5B,IAAO+B,cAAgB/B,IAAOuB,QAA7E,UACE,cAAC,IAAD,CAASS,GAAE,mBAAcT,EAAQK,QAAjC,SACE,qBAAK7B,UAAWC,IAAOiC,aACvBC,IAAKX,EAAQY,MAAOC,IAAI,aAE1B,sBAAKrC,UAAWC,IAAOqC,iBAAvB,UACE,oBAAItC,UAAWC,IAAOsC,cAAtB,SAAsCf,EAAQgB,WAC9C,4BAAIhB,EAAQA,mBAOhBrB,EAA2B,WAAO,IAAD,EACPI,mBAAS,IADF,mBAC9BiB,EAD8B,KACrBiB,EADqB,KAG/BlD,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAQ/D,OACE,sBAAKO,UAAWC,IAAOyC,KAAvB,UACE,qBAAK1C,UAAWC,IAAO0C,WAAvB,SACE,0BAAUC,MAAOpB,EAASqB,SAAU,SAAC/B,GAAD,OAAO2B,EAAW3B,EAAEE,cAAc4B,QAAtE,SACGpB,MAIL,qBAAKxB,UAAWC,IAAO6C,aAAvB,SACE,wBAAQC,SAAqB,UAAXtD,EAAoBuD,QAfjB,WACpBxB,IACLjC,EAAS0D,YAAYzB,IACrBiB,EAAW,MAYP,wBAQOS,UA9GY,WACzB,OACE,8BACE,cAAC9D,EAAD","file":"static/js/5.f5597516.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"ChatPage_chat__1TNtx\",\"messages\":\"ChatPage_messages__2UQBp\",\"message\":\"ChatPage_message__fShj8\",\"message_owner\":\"ChatPage_message_owner__2B0yV\",\"message__content\":\"ChatPage_message__content__kK7S_\",\"message__ava\":\"ChatPage_message__ava__1LXs7\",\"message__user\":\"ChatPage_message__user__3KwRz\",\"form__text\":\"ChatPage_form__text__2XTwi\",\"form__button\":\"ChatPage_form__button__2prio\"};","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { MessageTypeAPI } from '../../API/chat-api'\r\nimport {\r\n  getMessages,\r\n  sendMessage,\r\n  stopGetMessages,\r\n} from '../../redux/chatReducer'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport styles from './ChatPage.module.css'\r\n\r\nconst ChatPage: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Chat />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Chat: React.FC = React.memo(() => {\r\n  const dispatch = useDispatch()\r\n  const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n  useEffect(() => {\r\n    dispatch(getMessages())\r\n    return () => {\r\n      dispatch(stopGetMessages())\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className={styles.chat} >\r\n      {status === 'error' && <h2>Some error. Please refresh page</h2>}\r\n      <Messages />\r\n      <AddMessageForm />\r\n    </div>\r\n  )\r\n})\r\n\r\nconst Messages: React.FC = () => {\r\n  const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n  const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n  useEffect(() => {\r\n    if (isAutoScroll)\r\n      messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n  }, [messages])\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const element = e.currentTarget\r\n    if (\r\n      element.scrollHeight - element.scrollTop - 200 <=\r\n      element.clientHeight\r\n    ) {\r\n      setIsAutoScroll(true)\r\n    } else setIsAutoScroll(false)\r\n  }\r\n\r\n  return (\r\n    <div className={styles.messages} onScroll={scrollHandler}\r\n    >\r\n      {messages.map((m, index) => (\r\n        <Message message={m} key={m.id} />\r\n      ))}\r\n      <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Message: React.FC<{ message: MessageTypeAPI }> = React.memo(({ message }) => {\r\n\r\n  const ownUserId = useSelector((state: AppStateType) => state.authUser.userId)\r\n\r\n  console.log(ownUserId)\r\n  \r\n    \r\n    return (\r\n      <div className={ownUserId === message.userId ? styles.message_owner : styles.message}>        \r\n        <NavLink to={`/profile/${message.userId}`}>\r\n          <img className={styles.message__ava} \r\n          src={message.photo} alt='avatar' />\r\n        </NavLink>\r\n        <div className={styles.message__content}>\r\n          <h3 className={styles.message__user}>{message.userName}</h3>\r\n          <p>{message.message}</p> \r\n        </div>               \r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n  const [message, setMessage] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n  const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n  const sendMessageHandler = () => {\r\n    if (!message) return\r\n    dispatch(sendMessage(message))\r\n    setMessage('')\r\n  }\r\n\r\n  return (\r\n    <div className={styles.form}>\r\n      <div className={styles.form__text}>\r\n        <textarea value={message} onChange={(e) => setMessage(e.currentTarget.value)}>\r\n          {message}\r\n        </textarea>\r\n      </div>\r\n      \r\n      <div className={styles.form__button}>\r\n        <button disabled={status !== 'ready'} onClick={sendMessageHandler}>\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatPage\r\n"],"sourceRoot":""}