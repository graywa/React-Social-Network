{"version":3,"sources":["components/HOC/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","authUser","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","path","id","className","classes","dialog","activeClassName","active","name","Message","message","TextArea","Element","maxLength14","maxLengthCreator","MessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","dialogsData","map","messagesElements","messagesData","dialogs","users","messages__block","messages","values","newMessageAC","newMessage","compose","actionCreators"],"mappings":"4NAKMA,EAA6B,SAACC,GAAD,MAA0B,CAC3DC,OAAQD,EAAME,SAASD,SAOlB,SAASE,EAAiBC,GAAiC,IAC1DC,EADyD,uKAG3D,OAAKC,KAAKC,MAAMN,OACT,cAACG,EAAD,eAAeE,KAAKC,QADI,cAAC,IAAD,CAAUC,GAAI,eAHc,GAC/BC,IAAML,WAMtC,OAAOM,YAAQX,EAARW,CAAoCL,K,oBCnB7CM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,uBAAuB,OAAS,wBAAwB,OAAS,wBAAwB,gBAAkB,iCAAiC,SAAW,0BAA0B,QAAU,yBAAyB,KAAO,wB,6FCiBzQC,EARwB,SAACN,GACtC,IAAIO,EAAI,mBAAeP,EAAMQ,IAE7B,OAAO,qBAAKC,UAAWC,IAAQC,OAAxB,SACL,cAAC,IAAD,CAASV,GAAIM,EAAMK,gBAAiBF,IAAQG,OAA5C,SAAqDb,EAAMc,UCFhDC,EAJsB,SAACf,GACpC,OAAO,qBAAKS,UAAWC,IAAQM,QAAxB,SAAiC,4BAAIhB,EAAMgB,a,mCCA9CC,EAAWC,YAAQ,YACnBC,EAAcC,YAAiB,IAoB/BC,EAAmBC,YAA8B,CACrDC,KAAM,WADiBD,EAlB4C,SAACtB,GACpE,OACE,uBAAMS,UAAWC,IAAQa,KAAMC,SAAUxB,EAAMyB,aAA/C,UACE,8BACE,cAACC,EAAA,EAAD,CACEZ,KAAK,aACLa,UAAWV,EACXW,SAAU,CAACC,IAAUV,GACrBW,YAAY,YAGhB,8BACE,kDAiDOC,EA/ByB,SAAC/B,GAEvC,IAAIP,EAAQO,EAAMgC,YAEdC,EAAkBxC,EAAMyC,YACzBC,KAAI,SAAAxB,GAAM,OAAI,cAAC,EAAD,CAAYG,KAAMH,EAAOG,KAAMN,GAAIG,EAAOH,IAASG,EAAOH,OAEvE4B,EAAmB3C,EAAM4C,aAC1BF,KAAI,SAAAnB,GAAO,OAAI,cAAC,EAAD,CAASA,QAASA,EAAQA,SAAcA,EAAQR,OAMlE,OACE,sBAAKC,UAAWC,IAAQ4B,QAAxB,UACE,qBAAK7B,UAAWC,IAAQ6B,MAAxB,SACGN,IAGH,sBAAKxB,UAAWC,IAAQ8B,gBAAxB,UACE,qBAAK/B,UAAWC,IAAQ+B,SAAxB,SACGL,IAEH,cAACf,EAAD,CAAkBG,SAdJ,SAACkB,GACnB1C,EAAM2C,aAAaD,EAAOE,sB,yBCxCfC,sBACb1C,aALoB,SAACV,GAAD,MAA0B,CAC9CuC,YAAavC,EAAMuC,eAIM,CACvBW,aAAcG,IAAeH,eAE/B/C,IAJaiD,CAKbd","file":"static/js/4.2111d8ff.chunk.js","sourcesContent":["import {Redirect} from 'react-router-dom'\r\nimport React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateType} from '../../redux/redux-store'\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n  isAuth: state.authUser.isAuth\r\n})\r\n\r\ntype MapPropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\nexport function withAuthRedirect(Component: React.ComponentType) {\r\n  class RedirectComponent extends React.Component<MapPropsType> {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n  return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\n\r\n// export function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n//   class RedirectComponent (props: WCP & MapPropsType) {\r\n//     if (!props.isAuth) return <Redirect to={'/login'}/>\r\n//     return <Component {...props} />\r\n//   }\r\n//\r\n//   // @ts-ignore\r\n//   let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n//   return ConnectedAuthRedirectComponent\r\n// }\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3yLRr\",\"users\":\"Dialogs_users__iVcZG\",\"dialog\":\"Dialogs_dialog__1Sgp-\",\"active\":\"Dialogs_active__2Dtta\",\"messages__block\":\"Dialogs_messages__block__2uP-c\",\"messages\":\"Dialogs_messages__1znFC\",\"message\":\"Dialogs_message__2KJ3q\",\"form\":\"Dialogs_form__2kEbY\"};","import React from 'react'\r\nimport classes from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\n\r\ntype PropsType = {\r\n  id: number\r\n  name: string\r\n}\r\n\r\nconst DialogItem:React.FC<PropsType> = (props) => {\r\n  let path = `/dialogs/${props.id}`\r\n\r\n  return <div className={classes.dialog}>\r\n    <NavLink to={path} activeClassName={classes.active}>{props.name}</NavLink>\r\n  </div>\r\n}\r\n\r\nexport default DialogItem","import React from 'react'\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\ntype PropsType = {\r\n  message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n  return <div className={classes.message}><p>{props.message}</p></div>\r\n}\r\n\r\nexport default Message","import classes from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form'\r\nimport {required, maxLengthCreator} from '../utilities/validators'\r\nimport {Element} from '../common/FormsControl/FormsControl'\r\nimport {InitialStateType} from '../../redux/dialogsReducer'\r\nimport React from 'react'\r\n\r\nconst TextArea = Element('textarea')\r\nconst maxLength14 = maxLengthCreator(14)\r\n\r\nconst MessageForm: React.FC<InjectedFormProps<NewMessageFormType>> = (props) => {\r\n  return (\r\n    <form className={classes.form} onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          name='newMessage'\r\n          component={TextArea}\r\n          validate={[required, maxLength14]}\r\n          placeholder='Hello'\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst MessageFormRedux = reduxForm<NewMessageFormType>({\r\n  form: 'message'\r\n})(MessageForm)\r\n\r\ntype NewMessageFormType = {\r\n  newMessage: string\r\n}\r\ntype OwnPropsType = {\r\n  dialogsPage: InitialStateType\r\n  newMessageAC: (message: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<OwnPropsType> = (props) => {\r\n\r\n  let state = props.dialogsPage\r\n\r\n  let dialogsElements = state.dialogsData\r\n    .map(dialog => <DialogItem name={dialog.name} id={dialog.id} key={dialog.id}/>)\r\n\r\n  let messagesElements = state.messagesData\r\n    .map(message => <Message message={message.message} key={message.id}/>)\r\n\r\n  let onSendMessage = (values: NewMessageFormType) => {\r\n    props.newMessageAC(values.newMessage)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.dialogs}>\r\n      <div className={classes.users}>\r\n        {dialogsElements}\r\n      </div>\r\n\r\n      <div className={classes.messages__block}>\r\n        <div className={classes.messages}>\r\n          {messagesElements}\r\n        </div>         \r\n        <MessageFormRedux onSubmit={onSendMessage}/>           \r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dialogs","import React from 'react'\r\nimport {actionCreators} from '../../redux/dialogsReducer'\r\nimport Dialogs from './Dialogs'\r\nimport {connect} from 'react-redux'\r\nimport {withAuthRedirect} from '../HOC/withAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport {reset} from 'redux-form'\r\nimport {AppStateType} from '../../redux/redux-store'\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n  dialogsPage: state.dialogsPage,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    newMessageAC: actionCreators.newMessageAC\r\n  }),\r\n  withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}